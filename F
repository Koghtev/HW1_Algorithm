//
//  F.cpp
//  HW1
//
//  Created by Вадим Кохтев on 14/02/15.
//  Copyright (c) 2015 Вадим Кохтев. All rights reserved.
//


#include<iostream>
#include<vector>
#include<stdlib.h>

template<typename T>
T Partition(T start, T end, T pivot) {
    if(start == end) {
        return start;
    }
    std::swap(*start, *pivot);
    pivot = start;
    ++start;
    while(true) {
        while(*start < *pivot && start < end) { // hoare partition
            ++start;
        }
        while(end > start && end >= start && *(end-1) >= *pivot){
            --end;
        }
        if(start < end) {
            std::swap(*(end-1), *start);
            --end;
            ++start;
        } else {
            break;
        }
    }
    if (pivot < end-1) {
        std::swap(*(end-1), *pivot);
        pivot = end-1;
    }
    return pivot;
}

template<typename T>
void QuickSort(T start, T end) {
    if(end == start) {
       return;
    }
    T pivot = start + rand() % (end - start);
    pivot = Partition(start, end, pivot);
    QuickSort(start, pivot);
    QuickSort(pivot+1, end);
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> a(n);
    for(size_t i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    QuickSort(a.begin(), a.end());
    for(size_t i = 0; i < n; i++) {
        std::cout << a[i] << ' ';
    }
    return 0;
}
